vim cheats

hex viewer
%!xxd
%!xxd -r (reverts)

pg down, up
^F, ^B

reload
:e

od print named chars
od -a -x fs

#define BLKSIZE 4096	// Block size in bytes
#define NBLOCKS 25600	// Max num allocatable blocks 
			// 4096 bytes * 25600 blocks == 100MB

typedef ino_t unsigned int;	// inode number is just an int
typedef mode_t unsigned int;	// file mode is just an int

struct dirent {
	ino_t inode;	// inode number
	char name[];	// filename
}

struct file {
	mode_t mode;	// read, write, append
	int f_pos;	// Byte offset seek'ed to
	int size;	// File size
	struct inode* f_inode; // pointer to the file's inode
	int type;	// 0 file, 1 directory

	struct block* blocks[]	// Direct blocks
	struct indirect_block* iblocks[] // First-level indirect blocks
	
}

struct inode {
	unsigned long inode_num;	// Inode number
	int num_links;			// Number of hard links to the inode
}

struct block {
	char data[BLKSIZE];
}

struct indirect_block {	
	int n_iblocks;

	struct block* blocks[];
	struct indirect_block iblocks[];	// nth-level indirect block
}

struct block_bitmap {
	int blocknum;
	int prev, next;
	struct block* blocks[NBLOCKS];
}

struct filesystem {	
	struct dirent* root;
	struct block* block_bitmap;	// block number of the first block bitmap
}

For shell:

struct files_struct {
	int count;		// # of open file descriptors
	struct file* fd[];	// Open file descriptors
}

system calls:

#include <fcntl.h>
static char[] file = "fs";
void _mkfs() {
	FILE* fp = fopen(file);
	int OK = posix_fallocate(fp, 0, BLKSIZE*NBLOCKS); // Allocate space for the entire filesystem

	struct filesystem fs;

	for (int i = 0; i < NBLOCKS; i++) {
		fseek(fp, BLKSIZE*i, SEEK_SET);
		fputs ("-block %i-", i);
	}
	
}